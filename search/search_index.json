{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Maven project for generating a Java wrapper around rsync for Linux, Mac OSX and Windows. For Windows, binaries are included in the jars and rsync4j will set up an environment in the user's home directory ( %USERPROFILE%\\rsync4j ) on first usage (can be customized, see Section Environment variables/Windows ). In November 2022, the 32-bit version of Cygwin reached its end-of-life. Therefore 32-bit support is only available up to version: 3.2.3-12","title":"Home"},{"location":"commandline/","text":"RSync # The options of the com.github.fracpete.rsync4j.RSync tool are modeled after the rsync executable itself. Here is the help screen: usage: com.github.fracpete.rsync4j.RSync [-h] [--output-commandline] [--maxtime MAXTIME] [-v] [--info INFO] [--debug DEBUG] [--msgs2stderr] [-q] [--no-motd] [-c] [-a] [-r] [-R] [--no-implied-dirs] [-b] [--backup-dir BACKUPDIR] [--suffix SUFFIX] [-u] [--inplace] [--append] [--append-verify] [-d] [-l] [-L] [--copy-unsafe-links] [--safe-links] [--munge-links] [-k] [-K] [-H] [-p] [-E] [--chmod CHMOD] [-X] [-o] [-g] [--devices] [--specials] [-t] [-O] [-J] [--super] [--fake-super] [-S] [--preallocate] [-n] [-W] [-x] [-B BLOCKSIZE] [-e RSH] [--rsync-path RSYNCPATH] [--existing] [--ignore-existing] [--remove-source-files] [--delete] [--delete-before] [--delete-during] [--delete-delay] [--delete-after] [--delete-excluded] [--ignore-missing-args] [--delete-missing-args] [--ignore-errors] [--force] [--max-delete MAXDELETE] [--max-size MAXSIZE] [--min-size MINSIZE] [--partial] [--partial-dir PARTIALDIR] [--delay-updates] [-m] [--numeric-ids] [--usermap USERMAP] [--groupmap GROUPMAP] [--chown CHOWN] [--timeout TIMEOUT] [--contimeout CONTIMEOUT] [-I] [-M REMOTEOPTION] [--size-only] [--modify-window MODIFYWINDOW] [-T TEMPDIR] [-y] [--compare-dest COMPAREDEST] [--copy-dest COPYDEST] [--link-dest LINKDEST] [-z] [--compress-level COMPRESSLEVEL] [--skip-compress SKIPCOMPRESS] [-C] [-f FILTER] [--exclude EXCLUDE] [--exclude-from EXCLUDEFROM] [--include INCLUDE] [--include-from INCLUDEFROM] [--files-from FILESFROM] [-0] [-s] [--address ADDRESS] [--port PORT] [--sockopts SOCKOPTS] [--blocking-io] [--stats] [-8] [--human-readable] [--progress] [-i] [--out-format OUTFORMAT] [--log-file LOGFILE] [--log-file-format LOGFILEFORMAT] [--password-file PASSWORDFILE] [--list-only] [--bwlimit BWLIMIT] [--outbuf OUTBUF] [--write-batch WRITEBATCH] [--only-write-batch ONLYWRITEBATCH] [--read-batch READBATCH] [--protocol PROTOCOL] [--iconv ICONV] [--checkum-seed CHECKSUMSEED] [-4] [-6] [--version] [--additional ADDITIONAL] [source(s)/destination [source(s)/destination ...]] A fast, versatile, remote (and local) file-copying tool. See man page: https://linux.die.net/man/1/rsync positional arguments: source(s)/destination Multiple local/remote paths (path or [user@]host: path), with the last one being the target and the others the source(s). optional arguments: -h, --help show this help message and exit --output-commandline output the command-line generated for the wrapped binary --maxtime MAXTIME set the maximum time for the process to run in seconds before getting killed -v, --verbose increase verbosity --info INFO fine-grained informational verbosity --debug DEBUG fine-grained debug verbosity --msgs2stderr special output handling for debugging -q, --quiet suppress non-error messages --no-motd suppress daemon-mode MOTD -c, --checksum skip based on checksum, not mod-time & size -a, --archive archive mode; equals -rlptgoD (no -H,-A,-X) -r, --recursive recurse into directories -R, --relative use relative path names --no-implied-dirs use relative path names -b, --backup make backups (see --suffix & --backup-dir) --backup-dir BACKUPDIR make backups into hierarchy based in DIR --suffix SUFFIX set backup suffix (default ~ w/o --backup-dir) -u, --update skip files that are newer on the receiver --inplace update destination files in-place --append append data onto shorter files --append-verify like --append, but with old data in file checksum -d, --dirs transfer directories without recursing -l, --links copy symlinks as symlinks -L, --copy-links transform symlink into referent file/dir --copy-unsafe-links only \"unsafe\" symlinks are transformed --safe-links ignore symlinks that point outside the source tree --munge-links munge symlinks to make them safer (but unusable) -k, --copy-dirlinks transform symlink to a dir into referent dir -K, --keep-dirlinks treat symlinked dir on receiver as dir -H, --hard-links preserve hard links -p, --perms preserve permissions -E, --executability preserve the file's executability --chmod CHMOD affect file and/or directory permissions -X, --xattrs preserve extended attributes -o, --owner preserve owner (super-user only) -g, --group preserve group --devices preserve device files (super-user only) --specials preserve special files -t, --times preserve modification times -O, --omit-dir-times omit directories from --times -J, --omit-link-times omit symlinks from --times --super receiver attempts super-user activities --fake-super store/recover privileged attrs using xattrs -S, --sparse handle sparse files efficiently --preallocate allocate dest files before writing them -n, --dry-run perform a trial run with no changes made -W, --whole-file copy files whole (without delta-xfer algorithm) -x, --one-file-system don't cross filesystem boundaries -B BLOCKSIZE, --block-size BLOCKSIZE force a fixed checksum block-size -e RSH, --rsh RSH specify the remote shell to use. On Windows, use 'ssh' to use built-in ssh binary; otherwise use absolute path, eg 'C: \\somewhere\\ssh' or '/usr/bin/ssh'. Uses plain protocol if left empty. --rsync-path RSYNCPATH specify the rsync to run on the remote machine --existing skip creating new files on receiver --ignore-existing skip updating files that already exist on receiver --remove-source-files sender removes synchronized files (non-dirs) --delete delete extraneous files from destination dirs --delete-before receiver deletes before transfer, not during --delete-during receiver deletes during the transfer --delete-delay find deletions during, delete after --delete-after receiver deletes after transfer, not during --delete-excluded also delete excluded files from destination dirs --ignore-missing-args ignore missing source args without error --delete-missing-args delete missing source args from destination --ignore-errors delete even if there are I/O errors --force force deletion of directories even if not empty --max-delete MAXDELETE don't delete more than NUM files --max-size MAXSIZE don't transfer any file larger than SIZE --min-size MINSIZE don't transfer any file smaller than SIZE --partial keep partially transferred files --partial-dir PARTIALDIR put a partially transferred file into DIR --delay-updates put all updated files into place at transfer's end -m, --prune-empty-dirs prune empty directory chains from the file-list --numeric-ids don't map uid/gid values by user/group name --usermap USERMAP custom username mapping --groupmap GROUPMAP custom groupname mapping --chown CHOWN simple username/groupname mapping --timeout TIMEOUT set I/O timeout in seconds --contimeout CONTIMEOUT set daemon connection timeout in seconds -I, --ignore-times don't skip files that match in size and mod-time -M REMOTEOPTION, --remote-option REMOTEOPTION send OPTION to the remote side only --size-only skip files that match in size --modify-window MODIFYWINDOW compare mod-times with reduced accuracy -T TEMPDIR, --temp-dir TEMPDIR create temporary files in directory DIR -y, --fuzzy find similar file for basis if no dest file --compare-dest COMPAREDEST also compare destination files relative to DIR --copy-dest COPYDEST ... and include copies of unchanged files --link-dest LINKDEST hardlink to files in DIR when unchanged -z, --compress compress file data during the transfer --compress-level COMPRESSLEVEL explicitly set compression level --skip-compress SKIPCOMPRESS skip compressing files with a suffix in LIST -C, --cvs-exclude auto-ignore files the same way CVS does -f FILTER, --filter FILTER add a file-filtering RULE --exclude EXCLUDE exclude files matching PATTERN --exclude-from EXCLUDEFROM read exclude patterns from FILE --include INCLUDE include files matching PATTERN --include-from INCLUDEFROM read include patterns from FILE --files-from FILESFROM read list of source-file names from FILE -0, --from0 all *-from/filter files are delimited by 0s -s, --protect-args no space-splitting; only wildcard special-chars --address ADDRESS bind address for outgoing socket to daemon --port PORT specify double-colon alternate port number --sockopts SOCKOPTS specify custom TCP options --blocking-io use blocking I/O for the remote shell --stats give some file-transfer stats -8, --8-bit-output leave high-bit chars unescaped in output --human-readable output numbers in a human-readable format --progress show progress during transfer -i, --itemize-changes output a change-summary for all updates --out-format OUTFORMAT output updates using the specified FORMAT --log-file LOGFILE log what we're doing to the specified FILE --log-file-format LOGFILEFORMAT log updates using the specified FMT --password-file PASSWORDFILE read daemon-access password from FILE --list-only list the files instead of copying them --bwlimit BWLIMIT limit socket I/O bandwidth --outbuf OUTBUF set output buffering to None, Line, or Block (N|L|B) --write-batch WRITEBATCH write a batched update to FILE --only-write-batch ONLYWRITEBATCH like --write-batch but w/o updating destination --read-batch READBATCH read a batched update from FILE --protocol PROTOCOL force an older protocol version to be used --iconv ICONV request charset conversion of filenames --checkum-seed CHECKSUMSEED set block/file checksum seed (advanced) -4, --ipv4 prefer IPv4 -6, --ipv6 prefer IPv6 --version print version number --additional ADDITIONAL generic option to pass on to rsync; for command- line parsing to work though, leading dashes must get replaced with '+', eg '--additional \"++exclude=*~\"' Ssh # The options of the com.github.fracpete.rsync4j.Ssh tool are modeled after the ssh executable itself. Here is the help screen: usage: com.github.fracpete.rsync4j.Ssh [-h] [--output-commandline] [--maxtime MAXTIME] [-1] [-2] [-4] [-6] [-A] [-a] [-b BINDADDRESS] [-C] [-c CIPHERSPEC] [-D DYNAMICBINDADDRESS] [-E LOGFILE] [-e ESCAPECHAR] [-F CONFIGFILE] [-f] [-G] [-g] [-I PKCS11] [-K] [-k] [-L LOCAL] [-l LOGINNAME] [-M] [-m MACSPEC] [-N] [-n] [-O CONTROLCOMMAND] [-o OPTION] [-p PORT] [-q] [-R REMOTE] [-s] [-T] [-t] [-v] [-vv] [-vvv] [-W FORWARDTO] [-w FORWARDTUNNEL] [-X] [-x] [-Y] [-y] hostname [command] OpenSSH SSH client (remote login program). No interactive sessions possible. See man page: https://linux.die.net/man/1/ssh positional arguments: hostname The hostname to connect to. The hostname to connect to. command The remote command to execute. optional arguments: -h, --help show this help message and exit --output-commandline output the command-line generated for the wrapped binary --maxtime MAXTIME set the maximum time for the process to run in seconds before getting killed -1 Forces ssh to try protocol version 1 only. -2 Forces ssh to try protocol version 2 only. -4 Forces ssh to use IPv4 addresses only. -6 Forces ssh to use IPv6 addresses only. -A Enables forwarding of the authentication agent connection. -a Disables forwarding of the authentication agent connection. -b BINDADDRESS Use bind_address on the local machine as the source address of the connection. -C Requests compression of all data. -c CIPHERSPEC Selects the cipher specification for encrypting the session. -D DYNAMICBINDADDRESS Specifies a local \u201cdynamic\u201d application-level port forwarding ([bind_address:]port). -E LOGFILE Append debug logs to log_file instead of standard error. -e ESCAPECHAR Sets the escape character for sessions with a pty (default: \u2018~\u2019). -F CONFIGFILE Specifies an alternative per-user configuration file. -f Requests ssh to go to background just before command execution. -G Causes ssh to print its configuration after evaluating Host and Match blocks and exit. -g Allows remote hosts to connect to local forwarded ports -I PKCS11 Specify the PKCS#11 shared library ssh should use to communicate with a PKCS#11 token providing the user's private RSA key. -K Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI credentials to the server. -k Disables forwarding (delegation) of GSSAPI credentials to the server. -L LOCAL Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side. -l LOGINNAME Specifies the user to log in as on the remote machine. -M Places the ssh client into \u201cmaster\u201d mode for connection sharing. -m MACSPEC A comma-separated list of MAC (message authentication code) algorithms, specified in order of preference. -N Do not execute a remote command. This is useful for just forwarding ports. -n Redirects stdin from /dev/null (actually, prevents reading from stdin). -O CONTROLCOMMAND Control an active connection multiplexing master process. -o OPTION Can be used to give options in the format used in the configuration file. -p PORT Port to connect to on the remote host. -q Quiet mode. Causes most warning and diagnostic messages to be suppressed. -R REMOTE Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the given host and port, or Unix socket, on the local side. -s May be used to request invocation of a subsystem on the remote system. -T Disable pseudo-terminal allocation. -t Force pseudo-terminal allocation. -v Verbose mode. -vv Very verbose mode. -vvv Very, very verbose mode. -W FORWARDTO Requests that standard input and output on the client be forwarded to host on port over the secure channel. -w FORWARDTUNNEL Requests tunnel device forwarding with the specified tun(4) devices between the client (local_tun) and the server (remote_tun). -X Enables X11 forwarding. -x Disables X11 forwarding. -Y Enables trusted X11 forwarding. -y Send log information using the syslog system module. SshKeyGen # The options of the com.github.fracpete.rsync4j.SshKeyGen tool are modeled after the ssh-keygen executable itself. Here is the help screen: usage: com.github.fracpete.rsync4j.SshKeyGen [-h] [--output-commandline] [-A] [-a ROUNDS] [-B] [-b BITS] [-C COMMENT] [-D PKCS11] [-E FINGERPRINT] [-e] [-F FINDHOST] [-f KEYFILE] [-G CANDIDATEPRIMES] [-g] [-H] [--host] [-i] [-J SCREENNUMLINES] [-j SCREENSTARTLINE] [-K SCREENCHECKPOINT] [-k] [-L] [-l] [-M MEMORY] [-m KEYFORMAT] [-N NEWPASSPHRASE] [-n PRINCIPALS] [-O OPTION] [-o] [-P PASSPHRASE] [-p] [-Q] [-q] [-R REMOVEKEYS] [-r PRINTFINGERPRINT] [-S STARTPOINT] [-s SIGNCAKEY] [-T TESTCANDIDATEPRIMES] [-t KEYTYPE] [-u] [-V VALIDITYINTERVAL] [-v] [-vv] [-vvv] [-W GENERATOR] [-y] [-z SERIALNUMBER] [file [file ...]] Authentication key generation, management and conversion. See man page: https://linux.die.net/man/1/ssh-keygen positional arguments: file The key file(s). optional arguments: -h, --help show this help message and exit --output-commandline output the command-line generated for the wrapped binary -A For each of the key types (rsa1, rsa, dsa, ecdsa and ed25519) for which host keys do not exist, generate the host keys with the default key file path, an empty passphrase, default bits for the key type, and default comment. -a ROUNDS When saving a new-format private key (i.e. an ed25519 key or any SSH protocol 2 key when the -o flag is set), this option specifies the number of KDF (key derivation function) rounds used. -B Show the bubblebabble digest of specified private or public key file. -b BITS Specifies the number of bits in the key to create. -C COMMENT Provides a new comment. -D PKCS11 Download the RSA public keys provided by the PKCS#11 shared library pkcs11. -E FINGERPRINT Specifies the hash algorithm used when displaying key fingerprints. -e This option will read a private or public OpenSSH key file and print to stdout the key in one of the formats specified by the -m option. -F FINDHOST Search for the specified hostname in a known_hosts file, listing any occurrences found. -f KEYFILE Specifies the filename of the key file. -G CANDIDATEPRIMES Generate candidate primes for DH-GEX.. -g Use generic DNS format when printing fingerprint resource records using the -r command. -H Hash a known_hosts file. --host When signing a key, create a host certificate instead of a user certificate. -i This option will read an unencrypted private (or public) key file in the format specified by the - m option and print an OpenSSH compatible private (or public) key to stdout. -J SCREENNUMLINES Exit after screening the specified number of lines while performing DH candidate screening using the -T option. -j SCREENSTARTLINE Start screening at the specified line number while performing DH candidate screening using the -T option. -K SCREENCHECKPOINT Write the last line processed to the file checkpt while performing DH candidate screening using the -T option. -k Generate a KRL file. -L Prints the contents of one or more certificates. -l Show fingerprint of specified public key file. -M MEMORY Specify the amount of memory to use (in megabytes) when generating candidate moduli for DH-GEX. -m KEYFORMAT Specify a key format for the -i (import) or -e (export) conversion options. -N NEWPASSPHRASE Provides the new passphrase. -n PRINCIPALS Specify one or more principals (user or host names) to be included in a certificate when signing a key. -O OPTION Specify a certificate option when signing a key. -o Causes ssh-keygen to save private keys using the new OpenSSH format rather than the more compatible PEM format. -P PASSPHRASE Provides the (old) passphrase. -p Requests changing the passphrase of a private key file instead of creating a new private key. -Q Test whether keys have been revoked in a KRL. -q Silence ssh-keygen. -R REMOVEKEYS Removes all keys belonging to hostname from a known_hosts file. -r PRINTFINGERPRINT Print the SSHFP fingerprint resource record named hostname for the specified public key file. -S STARTPOINT Specify start point (in hex) when generating candidate moduli for DH-GEX. -s SIGNCAKEY Certify (sign) a public key using the specified CA key. -T TESTCANDIDATEPRIMES Test DH group exchange candidate primes (generated using the -G option) for safety. -t KEYTYPE Specifies the type of key to create. -u Update a KRL. -V VALIDITYINTERVAL Specify a validity interval when signing a certificate. -v Verbose mode. -vv Very verbose mode. -vvv Very, very verbose mode. -W GENERATOR Specify desired generator when testing candidate moduli for DH-GEX. -y This option will read a private OpenSSH format file and print an OpenSSH public key to stdout. -z SERIALNUMBER Specifies a serial number to be embedded in the certificate to distinguish this certificate from others from the same CA.","title":"Command-line"},{"location":"commandline/#rsync","text":"The options of the com.github.fracpete.rsync4j.RSync tool are modeled after the rsync executable itself. Here is the help screen: usage: com.github.fracpete.rsync4j.RSync [-h] [--output-commandline] [--maxtime MAXTIME] [-v] [--info INFO] [--debug DEBUG] [--msgs2stderr] [-q] [--no-motd] [-c] [-a] [-r] [-R] [--no-implied-dirs] [-b] [--backup-dir BACKUPDIR] [--suffix SUFFIX] [-u] [--inplace] [--append] [--append-verify] [-d] [-l] [-L] [--copy-unsafe-links] [--safe-links] [--munge-links] [-k] [-K] [-H] [-p] [-E] [--chmod CHMOD] [-X] [-o] [-g] [--devices] [--specials] [-t] [-O] [-J] [--super] [--fake-super] [-S] [--preallocate] [-n] [-W] [-x] [-B BLOCKSIZE] [-e RSH] [--rsync-path RSYNCPATH] [--existing] [--ignore-existing] [--remove-source-files] [--delete] [--delete-before] [--delete-during] [--delete-delay] [--delete-after] [--delete-excluded] [--ignore-missing-args] [--delete-missing-args] [--ignore-errors] [--force] [--max-delete MAXDELETE] [--max-size MAXSIZE] [--min-size MINSIZE] [--partial] [--partial-dir PARTIALDIR] [--delay-updates] [-m] [--numeric-ids] [--usermap USERMAP] [--groupmap GROUPMAP] [--chown CHOWN] [--timeout TIMEOUT] [--contimeout CONTIMEOUT] [-I] [-M REMOTEOPTION] [--size-only] [--modify-window MODIFYWINDOW] [-T TEMPDIR] [-y] [--compare-dest COMPAREDEST] [--copy-dest COPYDEST] [--link-dest LINKDEST] [-z] [--compress-level COMPRESSLEVEL] [--skip-compress SKIPCOMPRESS] [-C] [-f FILTER] [--exclude EXCLUDE] [--exclude-from EXCLUDEFROM] [--include INCLUDE] [--include-from INCLUDEFROM] [--files-from FILESFROM] [-0] [-s] [--address ADDRESS] [--port PORT] [--sockopts SOCKOPTS] [--blocking-io] [--stats] [-8] [--human-readable] [--progress] [-i] [--out-format OUTFORMAT] [--log-file LOGFILE] [--log-file-format LOGFILEFORMAT] [--password-file PASSWORDFILE] [--list-only] [--bwlimit BWLIMIT] [--outbuf OUTBUF] [--write-batch WRITEBATCH] [--only-write-batch ONLYWRITEBATCH] [--read-batch READBATCH] [--protocol PROTOCOL] [--iconv ICONV] [--checkum-seed CHECKSUMSEED] [-4] [-6] [--version] [--additional ADDITIONAL] [source(s)/destination [source(s)/destination ...]] A fast, versatile, remote (and local) file-copying tool. See man page: https://linux.die.net/man/1/rsync positional arguments: source(s)/destination Multiple local/remote paths (path or [user@]host: path), with the last one being the target and the others the source(s). optional arguments: -h, --help show this help message and exit --output-commandline output the command-line generated for the wrapped binary --maxtime MAXTIME set the maximum time for the process to run in seconds before getting killed -v, --verbose increase verbosity --info INFO fine-grained informational verbosity --debug DEBUG fine-grained debug verbosity --msgs2stderr special output handling for debugging -q, --quiet suppress non-error messages --no-motd suppress daemon-mode MOTD -c, --checksum skip based on checksum, not mod-time & size -a, --archive archive mode; equals -rlptgoD (no -H,-A,-X) -r, --recursive recurse into directories -R, --relative use relative path names --no-implied-dirs use relative path names -b, --backup make backups (see --suffix & --backup-dir) --backup-dir BACKUPDIR make backups into hierarchy based in DIR --suffix SUFFIX set backup suffix (default ~ w/o --backup-dir) -u, --update skip files that are newer on the receiver --inplace update destination files in-place --append append data onto shorter files --append-verify like --append, but with old data in file checksum -d, --dirs transfer directories without recursing -l, --links copy symlinks as symlinks -L, --copy-links transform symlink into referent file/dir --copy-unsafe-links only \"unsafe\" symlinks are transformed --safe-links ignore symlinks that point outside the source tree --munge-links munge symlinks to make them safer (but unusable) -k, --copy-dirlinks transform symlink to a dir into referent dir -K, --keep-dirlinks treat symlinked dir on receiver as dir -H, --hard-links preserve hard links -p, --perms preserve permissions -E, --executability preserve the file's executability --chmod CHMOD affect file and/or directory permissions -X, --xattrs preserve extended attributes -o, --owner preserve owner (super-user only) -g, --group preserve group --devices preserve device files (super-user only) --specials preserve special files -t, --times preserve modification times -O, --omit-dir-times omit directories from --times -J, --omit-link-times omit symlinks from --times --super receiver attempts super-user activities --fake-super store/recover privileged attrs using xattrs -S, --sparse handle sparse files efficiently --preallocate allocate dest files before writing them -n, --dry-run perform a trial run with no changes made -W, --whole-file copy files whole (without delta-xfer algorithm) -x, --one-file-system don't cross filesystem boundaries -B BLOCKSIZE, --block-size BLOCKSIZE force a fixed checksum block-size -e RSH, --rsh RSH specify the remote shell to use. On Windows, use 'ssh' to use built-in ssh binary; otherwise use absolute path, eg 'C: \\somewhere\\ssh' or '/usr/bin/ssh'. Uses plain protocol if left empty. --rsync-path RSYNCPATH specify the rsync to run on the remote machine --existing skip creating new files on receiver --ignore-existing skip updating files that already exist on receiver --remove-source-files sender removes synchronized files (non-dirs) --delete delete extraneous files from destination dirs --delete-before receiver deletes before transfer, not during --delete-during receiver deletes during the transfer --delete-delay find deletions during, delete after --delete-after receiver deletes after transfer, not during --delete-excluded also delete excluded files from destination dirs --ignore-missing-args ignore missing source args without error --delete-missing-args delete missing source args from destination --ignore-errors delete even if there are I/O errors --force force deletion of directories even if not empty --max-delete MAXDELETE don't delete more than NUM files --max-size MAXSIZE don't transfer any file larger than SIZE --min-size MINSIZE don't transfer any file smaller than SIZE --partial keep partially transferred files --partial-dir PARTIALDIR put a partially transferred file into DIR --delay-updates put all updated files into place at transfer's end -m, --prune-empty-dirs prune empty directory chains from the file-list --numeric-ids don't map uid/gid values by user/group name --usermap USERMAP custom username mapping --groupmap GROUPMAP custom groupname mapping --chown CHOWN simple username/groupname mapping --timeout TIMEOUT set I/O timeout in seconds --contimeout CONTIMEOUT set daemon connection timeout in seconds -I, --ignore-times don't skip files that match in size and mod-time -M REMOTEOPTION, --remote-option REMOTEOPTION send OPTION to the remote side only --size-only skip files that match in size --modify-window MODIFYWINDOW compare mod-times with reduced accuracy -T TEMPDIR, --temp-dir TEMPDIR create temporary files in directory DIR -y, --fuzzy find similar file for basis if no dest file --compare-dest COMPAREDEST also compare destination files relative to DIR --copy-dest COPYDEST ... and include copies of unchanged files --link-dest LINKDEST hardlink to files in DIR when unchanged -z, --compress compress file data during the transfer --compress-level COMPRESSLEVEL explicitly set compression level --skip-compress SKIPCOMPRESS skip compressing files with a suffix in LIST -C, --cvs-exclude auto-ignore files the same way CVS does -f FILTER, --filter FILTER add a file-filtering RULE --exclude EXCLUDE exclude files matching PATTERN --exclude-from EXCLUDEFROM read exclude patterns from FILE --include INCLUDE include files matching PATTERN --include-from INCLUDEFROM read include patterns from FILE --files-from FILESFROM read list of source-file names from FILE -0, --from0 all *-from/filter files are delimited by 0s -s, --protect-args no space-splitting; only wildcard special-chars --address ADDRESS bind address for outgoing socket to daemon --port PORT specify double-colon alternate port number --sockopts SOCKOPTS specify custom TCP options --blocking-io use blocking I/O for the remote shell --stats give some file-transfer stats -8, --8-bit-output leave high-bit chars unescaped in output --human-readable output numbers in a human-readable format --progress show progress during transfer -i, --itemize-changes output a change-summary for all updates --out-format OUTFORMAT output updates using the specified FORMAT --log-file LOGFILE log what we're doing to the specified FILE --log-file-format LOGFILEFORMAT log updates using the specified FMT --password-file PASSWORDFILE read daemon-access password from FILE --list-only list the files instead of copying them --bwlimit BWLIMIT limit socket I/O bandwidth --outbuf OUTBUF set output buffering to None, Line, or Block (N|L|B) --write-batch WRITEBATCH write a batched update to FILE --only-write-batch ONLYWRITEBATCH like --write-batch but w/o updating destination --read-batch READBATCH read a batched update from FILE --protocol PROTOCOL force an older protocol version to be used --iconv ICONV request charset conversion of filenames --checkum-seed CHECKSUMSEED set block/file checksum seed (advanced) -4, --ipv4 prefer IPv4 -6, --ipv6 prefer IPv6 --version print version number --additional ADDITIONAL generic option to pass on to rsync; for command- line parsing to work though, leading dashes must get replaced with '+', eg '--additional \"++exclude=*~\"'","title":"RSync"},{"location":"commandline/#ssh","text":"The options of the com.github.fracpete.rsync4j.Ssh tool are modeled after the ssh executable itself. Here is the help screen: usage: com.github.fracpete.rsync4j.Ssh [-h] [--output-commandline] [--maxtime MAXTIME] [-1] [-2] [-4] [-6] [-A] [-a] [-b BINDADDRESS] [-C] [-c CIPHERSPEC] [-D DYNAMICBINDADDRESS] [-E LOGFILE] [-e ESCAPECHAR] [-F CONFIGFILE] [-f] [-G] [-g] [-I PKCS11] [-K] [-k] [-L LOCAL] [-l LOGINNAME] [-M] [-m MACSPEC] [-N] [-n] [-O CONTROLCOMMAND] [-o OPTION] [-p PORT] [-q] [-R REMOTE] [-s] [-T] [-t] [-v] [-vv] [-vvv] [-W FORWARDTO] [-w FORWARDTUNNEL] [-X] [-x] [-Y] [-y] hostname [command] OpenSSH SSH client (remote login program). No interactive sessions possible. See man page: https://linux.die.net/man/1/ssh positional arguments: hostname The hostname to connect to. The hostname to connect to. command The remote command to execute. optional arguments: -h, --help show this help message and exit --output-commandline output the command-line generated for the wrapped binary --maxtime MAXTIME set the maximum time for the process to run in seconds before getting killed -1 Forces ssh to try protocol version 1 only. -2 Forces ssh to try protocol version 2 only. -4 Forces ssh to use IPv4 addresses only. -6 Forces ssh to use IPv6 addresses only. -A Enables forwarding of the authentication agent connection. -a Disables forwarding of the authentication agent connection. -b BINDADDRESS Use bind_address on the local machine as the source address of the connection. -C Requests compression of all data. -c CIPHERSPEC Selects the cipher specification for encrypting the session. -D DYNAMICBINDADDRESS Specifies a local \u201cdynamic\u201d application-level port forwarding ([bind_address:]port). -E LOGFILE Append debug logs to log_file instead of standard error. -e ESCAPECHAR Sets the escape character for sessions with a pty (default: \u2018~\u2019). -F CONFIGFILE Specifies an alternative per-user configuration file. -f Requests ssh to go to background just before command execution. -G Causes ssh to print its configuration after evaluating Host and Match blocks and exit. -g Allows remote hosts to connect to local forwarded ports -I PKCS11 Specify the PKCS#11 shared library ssh should use to communicate with a PKCS#11 token providing the user's private RSA key. -K Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI credentials to the server. -k Disables forwarding (delegation) of GSSAPI credentials to the server. -L LOCAL Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side. -l LOGINNAME Specifies the user to log in as on the remote machine. -M Places the ssh client into \u201cmaster\u201d mode for connection sharing. -m MACSPEC A comma-separated list of MAC (message authentication code) algorithms, specified in order of preference. -N Do not execute a remote command. This is useful for just forwarding ports. -n Redirects stdin from /dev/null (actually, prevents reading from stdin). -O CONTROLCOMMAND Control an active connection multiplexing master process. -o OPTION Can be used to give options in the format used in the configuration file. -p PORT Port to connect to on the remote host. -q Quiet mode. Causes most warning and diagnostic messages to be suppressed. -R REMOTE Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the given host and port, or Unix socket, on the local side. -s May be used to request invocation of a subsystem on the remote system. -T Disable pseudo-terminal allocation. -t Force pseudo-terminal allocation. -v Verbose mode. -vv Very verbose mode. -vvv Very, very verbose mode. -W FORWARDTO Requests that standard input and output on the client be forwarded to host on port over the secure channel. -w FORWARDTUNNEL Requests tunnel device forwarding with the specified tun(4) devices between the client (local_tun) and the server (remote_tun). -X Enables X11 forwarding. -x Disables X11 forwarding. -Y Enables trusted X11 forwarding. -y Send log information using the syslog system module.","title":"Ssh"},{"location":"commandline/#sshkeygen","text":"The options of the com.github.fracpete.rsync4j.SshKeyGen tool are modeled after the ssh-keygen executable itself. Here is the help screen: usage: com.github.fracpete.rsync4j.SshKeyGen [-h] [--output-commandline] [-A] [-a ROUNDS] [-B] [-b BITS] [-C COMMENT] [-D PKCS11] [-E FINGERPRINT] [-e] [-F FINDHOST] [-f KEYFILE] [-G CANDIDATEPRIMES] [-g] [-H] [--host] [-i] [-J SCREENNUMLINES] [-j SCREENSTARTLINE] [-K SCREENCHECKPOINT] [-k] [-L] [-l] [-M MEMORY] [-m KEYFORMAT] [-N NEWPASSPHRASE] [-n PRINCIPALS] [-O OPTION] [-o] [-P PASSPHRASE] [-p] [-Q] [-q] [-R REMOVEKEYS] [-r PRINTFINGERPRINT] [-S STARTPOINT] [-s SIGNCAKEY] [-T TESTCANDIDATEPRIMES] [-t KEYTYPE] [-u] [-V VALIDITYINTERVAL] [-v] [-vv] [-vvv] [-W GENERATOR] [-y] [-z SERIALNUMBER] [file [file ...]] Authentication key generation, management and conversion. See man page: https://linux.die.net/man/1/ssh-keygen positional arguments: file The key file(s). optional arguments: -h, --help show this help message and exit --output-commandline output the command-line generated for the wrapped binary -A For each of the key types (rsa1, rsa, dsa, ecdsa and ed25519) for which host keys do not exist, generate the host keys with the default key file path, an empty passphrase, default bits for the key type, and default comment. -a ROUNDS When saving a new-format private key (i.e. an ed25519 key or any SSH protocol 2 key when the -o flag is set), this option specifies the number of KDF (key derivation function) rounds used. -B Show the bubblebabble digest of specified private or public key file. -b BITS Specifies the number of bits in the key to create. -C COMMENT Provides a new comment. -D PKCS11 Download the RSA public keys provided by the PKCS#11 shared library pkcs11. -E FINGERPRINT Specifies the hash algorithm used when displaying key fingerprints. -e This option will read a private or public OpenSSH key file and print to stdout the key in one of the formats specified by the -m option. -F FINDHOST Search for the specified hostname in a known_hosts file, listing any occurrences found. -f KEYFILE Specifies the filename of the key file. -G CANDIDATEPRIMES Generate candidate primes for DH-GEX.. -g Use generic DNS format when printing fingerprint resource records using the -r command. -H Hash a known_hosts file. --host When signing a key, create a host certificate instead of a user certificate. -i This option will read an unencrypted private (or public) key file in the format specified by the - m option and print an OpenSSH compatible private (or public) key to stdout. -J SCREENNUMLINES Exit after screening the specified number of lines while performing DH candidate screening using the -T option. -j SCREENSTARTLINE Start screening at the specified line number while performing DH candidate screening using the -T option. -K SCREENCHECKPOINT Write the last line processed to the file checkpt while performing DH candidate screening using the -T option. -k Generate a KRL file. -L Prints the contents of one or more certificates. -l Show fingerprint of specified public key file. -M MEMORY Specify the amount of memory to use (in megabytes) when generating candidate moduli for DH-GEX. -m KEYFORMAT Specify a key format for the -i (import) or -e (export) conversion options. -N NEWPASSPHRASE Provides the new passphrase. -n PRINCIPALS Specify one or more principals (user or host names) to be included in a certificate when signing a key. -O OPTION Specify a certificate option when signing a key. -o Causes ssh-keygen to save private keys using the new OpenSSH format rather than the more compatible PEM format. -P PASSPHRASE Provides the (old) passphrase. -p Requests changing the passphrase of a private key file instead of creating a new private key. -Q Test whether keys have been revoked in a KRL. -q Silence ssh-keygen. -R REMOVEKEYS Removes all keys belonging to hostname from a known_hosts file. -r PRINTFINGERPRINT Print the SSHFP fingerprint resource record named hostname for the specified public key file. -S STARTPOINT Specify start point (in hex) when generating candidate moduli for DH-GEX. -s SIGNCAKEY Certify (sign) a public key using the specified CA key. -T TESTCANDIDATEPRIMES Test DH group exchange candidate primes (generated using the -G option) for safety. -t KEYTYPE Specifies the type of key to create. -u Update a KRL. -V VALIDITYINTERVAL Specify a validity interval when signing a certificate. -v Verbose mode. -vv Very verbose mode. -vvv Very, very verbose mode. -W GENERATOR Specify desired generator when testing candidate moduli for DH-GEX. -y This option will read a private OpenSSH format file and print an OpenSSH public key to stdout. -z SERIALNUMBER Specifies a serial number to be embedded in the certificate to distinguish this certificate from others from the same CA.","title":"SshKeyGen"},{"location":"env_vars/","text":"Linux/Mac # Starting with release 3.2.3-12, the locations of the underlying binaries can be changed via the following environment variables: RSYNC4J_RSYNC RSYNC4J_SSH RSYNC4J_SSHPASS RSYNC4J_SSHKEYGEN Windows # It is possible to use another location than %USERPROFILE%\\rsync4j . You only have to configure the RSYNC4J_HOME environment variable to point to the top-level directory (doesn't have to exist) where you want to house the binaries and keys.","title":"Environment variables"},{"location":"env_vars/#linux_mac","text":"Starting with release 3.2.3-12, the locations of the underlying binaries can be changed via the following environment variables: RSYNC4J_RSYNC RSYNC4J_SSH RSYNC4J_SSHPASS RSYNC4J_SSHKEYGEN","title":"Linux/Mac"},{"location":"env_vars/#windows","text":"It is possible to use another location than %USERPROFILE%\\rsync4j . You only have to configure the RSYNC4J_HOME environment variable to point to the top-level directory (doesn't have to exist) where you want to house the binaries and keys.","title":"Windows"},{"location":"faq/","text":"Q: I'm trying to sync, but it just sits there and does nothing! # A: Since rsync4j is not interactive, you will have to connect to the remote host at least once before to add the host to the known_hosts file. Q: How do I use a specific public key pair? # A: You can let ssh know what identity file to use using rsync's --rsh option and ssh's -i option, e.g.: rsync --rsh=\"ssh -i /some/where/id_rsa\" ... Q: I cannot store ssh keys on the remote machine, how do I use user/password for the login? # A: Using Java, you can supply an instance of the SshPass class to the Rsync or Ssh object that will then feed the password to the underlying binary. Q: How can I suppress the prompt for accepting a remote fingerprint ( The authenticity of host 'XYZ' can't be established. Are you sure you want to continue connecting (yes/no/[fingerprint])? )? # A: Supply the following option to ssh (via -o ... ): StrictHostKeyChecking=no Q: How can I fix the incorrect permissions in the target directory under Windows (e.g., The permissions are incorrectly ordered, which may cause some entries to be ineffective. or Deny for \"NULL SID\" )? # A: Use the chmod argument of the RSync class with something like .chmod(\"ugo=rwX\") ( source ).","title":"FAQ"},{"location":"faq/#known_hosts","text":"A: Since rsync4j is not interactive, you will have to connect to the remote host at least once before to add the host to the known_hosts file.","title":"Q: I'm trying to sync, but it just sits there and does nothing!"},{"location":"faq/#identity","text":"A: You can let ssh know what identity file to use using rsync's --rsh option and ssh's -i option, e.g.: rsync --rsh=\"ssh -i /some/where/id_rsa\" ...","title":"Q: How do I use a specific public key pair?"},{"location":"faq/#sshpass","text":"A: Using Java, you can supply an instance of the SshPass class to the Rsync or Ssh object that will then feed the password to the underlying binary.","title":"Q: I cannot store ssh keys on the remote machine, how do I use user/password for the login?"},{"location":"faq/#stricthostkeychecking","text":"A: Supply the following option to ssh (via -o ... ): StrictHostKeyChecking=no","title":"Q: How can I suppress the prompt for accepting a remote fingerprint (The authenticity of host 'XYZ' can't be established. Are you sure you want to continue connecting (yes/no/[fingerprint])?)?"},{"location":"faq/#windows-permissions","text":"A: Use the chmod argument of the RSync class with something like .chmod(\"ugo=rwX\") ( source ).","title":"Q: How can I fix the incorrect permissions in the target directory under Windows (e.g., The permissions are incorrectly ordered, which may cause some entries to be ineffective. or Deny for \"NULL SID\")?"},{"location":"java/","text":"Rsync # Here is an example of configuring and running rsync from within Java, only outputting the data from stdout/stderr after the process completes: import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.output.CollectingProcessOutput; ... RSync rsync = new RSync() .source(\"/one/place/\") .destination(\"/other/place/\") .recursive(true); // or if you prefer using commandline options: // rsync.setOptions(new String[]{\"-r\", \"/one/place/\", \"/other/place/\"}); CollectingProcessOutput output = rsync.execute(); System.out.println(output.getStdOut()); System.out.println(\"Exit code: \" + output.getExitCode()); if (output.getExitCode() > 0) System.err.println(output.getStdErr()); This example outputs stdout/stderr from the rsync process as it occurs, rather than waiting till the end: import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... RSync rsync = new RSync() .source(\"/one/place/\") .destination(\"/other/place/\") .archive(true) .delete(true); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(rsync.builder()); If you want to process the output (stdout/stderr) from the rsync process yourself, then you can use StreamingProcessOutput instead of ConsoleOutputProcessOutput . You only need to supply an object of a class implementing the StreamingProcessOwner interface. Below is an example that simply prefixes the output with either [OUT] or [ERR] : import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.core.StreamingProcessOutputType; import com.github.fracpete.processoutput4j.core.StreamingProcessOwner; import com.github.fracpete.processoutput4j.output.StreamingProcessOutput; public static class Output implements StreamingProcessOwner { public StreamingProcessOutputType getOutputType() { return StreamingProcessOutputType.BOTH; } public void processOutput(String line, boolean stdout) { System.out.println((stdout ? \"[OUT] \" : \"[ERR] \") + line); } } ... RSync rsync = new RSync() .source(\"/one/place/\") .destination(\"/other/place/\") .recursive(true) .verbose(true); StreamingProcessOutput output = new StreamingProcessOutput(new Output()); output.monitor(rsync.builder()); Windows # When supplying the rsh option with an identity, usually like ssh -i /some/where/key.pub , you need to supply the actual Windows binary and Windows path to the identity. You can use the com.github.fracpete.rsync4j.core.Binaries class to help you construct the path properly, for instance: RSync rsync = new RSync() .source(\"C:\\\\somedir\") .destination(\"D:\\\\otherdir\") .recursive(true) .rsh(Binaries.sshBinary() + \" -i \" + Binaries.convertPath(\"C:\\\\keys\\\\mykey.pub\")); Multiple sources # You can specify multiple sources when using the sources methods. Either as array: String[] s = new String[]{ \"/first/place/\", \"/second/place/\", }; RSync rsync = new RSync() .sources(s) .destination(\"/other/place/\") .recursive(true) .verbose(true); Or as java.util.List<String> : List<String> s = new ArrayList<>(); s.add(\"/first/place\"); s.add(\"/second/place\"); RSync rsync = new RSync() .sources(s) .destination(\"/other/place/\") .recursive(true) .verbose(true); Rsync daemon # Instead of using rsync via ssh, you can also use the rsync daemon approach. On the server, you can use something like this as /etc/rsyncd.conf to make an upload directory /home/public_rsync available under the name files : pid file = /var/run/rsyncd.pid lock file = /var/run/rsync.lock log file = /var/log/rsync.log port = 12000 charset = utf\u20138 [files] path = /home/public_rsync comment = \"public rsync share\" use chroot = true uid = root gid = root read only = false For simplicity, we just start the daemon (running on port 12000) on the server (192.168.1.100) as root user as follows: sudo rsync --daemon The following command will upload the directory /home/myuser/some/where on the client to the files share: import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... RSync rsync = new RSync() .recursive(true) .times(true) .dirs(true) .verbose(true) .source(\"/home/myuser/some/where\") .destination(\"rsync://192.168.1.100:12000/files/\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(rsync.builder()); Ssh # The following command lists all files in the /tmp directory of the localhost in verbose mode and also outputting the generated command-line: import com.github.fracpete.rsync4j.Ssh; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... Ssh ssh = new Ssh() .outputCommandline(true) .verbose(1) .hostname(\"localhost\") .command(\"ls /tmp\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(ssh.builder()); SshKeyGen # The following command generates a key file named testkey in your home directory of type dsa , with no pass-phrase, outputting the bubble babble of the key: import com.github.fracpete.rsync4j.SshKeyGen; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... SshKeyGen keygen = new SshKeyGen() .outputCommandline(true) .verbose(1) .keyType(\"dsa\") .newPassPhrase(\"\") .comment(\"test key\") .keyFile(\"~/testkey\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(keygen.builder()); SshPass # If it is not possible to use ssh keys for connecting to a remote machine, you can fall back on using the user/password approach. For this, you will need to configure an instance of com.github.fracpete.rsync4j.SshPass class and pass it to Rsync or Ssh object that requires it. import com.github.fracpete.rsync4j.Ssh; import com.github.fracpete.rsync4j.SshPass; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... SshPass sshpass = new SshPass() .password(\"mysecretpassword\"); Ssh ssh = new Ssh() .sshPass(sshpass) .option(\"StrictHostKeyChecking=no\") .hostname(\"username@remote.host.com\") .command(\"ls /tmp\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(ssh.builder());","title":"Java"},{"location":"java/#rsync","text":"Here is an example of configuring and running rsync from within Java, only outputting the data from stdout/stderr after the process completes: import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.output.CollectingProcessOutput; ... RSync rsync = new RSync() .source(\"/one/place/\") .destination(\"/other/place/\") .recursive(true); // or if you prefer using commandline options: // rsync.setOptions(new String[]{\"-r\", \"/one/place/\", \"/other/place/\"}); CollectingProcessOutput output = rsync.execute(); System.out.println(output.getStdOut()); System.out.println(\"Exit code: \" + output.getExitCode()); if (output.getExitCode() > 0) System.err.println(output.getStdErr()); This example outputs stdout/stderr from the rsync process as it occurs, rather than waiting till the end: import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... RSync rsync = new RSync() .source(\"/one/place/\") .destination(\"/other/place/\") .archive(true) .delete(true); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(rsync.builder()); If you want to process the output (stdout/stderr) from the rsync process yourself, then you can use StreamingProcessOutput instead of ConsoleOutputProcessOutput . You only need to supply an object of a class implementing the StreamingProcessOwner interface. Below is an example that simply prefixes the output with either [OUT] or [ERR] : import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.core.StreamingProcessOutputType; import com.github.fracpete.processoutput4j.core.StreamingProcessOwner; import com.github.fracpete.processoutput4j.output.StreamingProcessOutput; public static class Output implements StreamingProcessOwner { public StreamingProcessOutputType getOutputType() { return StreamingProcessOutputType.BOTH; } public void processOutput(String line, boolean stdout) { System.out.println((stdout ? \"[OUT] \" : \"[ERR] \") + line); } } ... RSync rsync = new RSync() .source(\"/one/place/\") .destination(\"/other/place/\") .recursive(true) .verbose(true); StreamingProcessOutput output = new StreamingProcessOutput(new Output()); output.monitor(rsync.builder());","title":"Rsync"},{"location":"java/#windows","text":"When supplying the rsh option with an identity, usually like ssh -i /some/where/key.pub , you need to supply the actual Windows binary and Windows path to the identity. You can use the com.github.fracpete.rsync4j.core.Binaries class to help you construct the path properly, for instance: RSync rsync = new RSync() .source(\"C:\\\\somedir\") .destination(\"D:\\\\otherdir\") .recursive(true) .rsh(Binaries.sshBinary() + \" -i \" + Binaries.convertPath(\"C:\\\\keys\\\\mykey.pub\"));","title":"Windows"},{"location":"java/#multiple-sources","text":"You can specify multiple sources when using the sources methods. Either as array: String[] s = new String[]{ \"/first/place/\", \"/second/place/\", }; RSync rsync = new RSync() .sources(s) .destination(\"/other/place/\") .recursive(true) .verbose(true); Or as java.util.List<String> : List<String> s = new ArrayList<>(); s.add(\"/first/place\"); s.add(\"/second/place\"); RSync rsync = new RSync() .sources(s) .destination(\"/other/place/\") .recursive(true) .verbose(true);","title":"Multiple sources"},{"location":"java/#rsync-daemon","text":"Instead of using rsync via ssh, you can also use the rsync daemon approach. On the server, you can use something like this as /etc/rsyncd.conf to make an upload directory /home/public_rsync available under the name files : pid file = /var/run/rsyncd.pid lock file = /var/run/rsync.lock log file = /var/log/rsync.log port = 12000 charset = utf\u20138 [files] path = /home/public_rsync comment = \"public rsync share\" use chroot = true uid = root gid = root read only = false For simplicity, we just start the daemon (running on port 12000) on the server (192.168.1.100) as root user as follows: sudo rsync --daemon The following command will upload the directory /home/myuser/some/where on the client to the files share: import com.github.fracpete.rsync4j.RSync; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... RSync rsync = new RSync() .recursive(true) .times(true) .dirs(true) .verbose(true) .source(\"/home/myuser/some/where\") .destination(\"rsync://192.168.1.100:12000/files/\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(rsync.builder());","title":"Rsync daemon"},{"location":"java/#ssh","text":"The following command lists all files in the /tmp directory of the localhost in verbose mode and also outputting the generated command-line: import com.github.fracpete.rsync4j.Ssh; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... Ssh ssh = new Ssh() .outputCommandline(true) .verbose(1) .hostname(\"localhost\") .command(\"ls /tmp\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(ssh.builder());","title":"Ssh"},{"location":"java/#sshkeygen","text":"The following command generates a key file named testkey in your home directory of type dsa , with no pass-phrase, outputting the bubble babble of the key: import com.github.fracpete.rsync4j.SshKeyGen; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... SshKeyGen keygen = new SshKeyGen() .outputCommandline(true) .verbose(1) .keyType(\"dsa\") .newPassPhrase(\"\") .comment(\"test key\") .keyFile(\"~/testkey\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(keygen.builder());","title":"SshKeyGen"},{"location":"java/#sshpass","text":"If it is not possible to use ssh keys for connecting to a remote machine, you can fall back on using the user/password approach. For this, you will need to configure an instance of com.github.fracpete.rsync4j.SshPass class and pass it to Rsync or Ssh object that requires it. import com.github.fracpete.rsync4j.Ssh; import com.github.fracpete.rsync4j.SshPass; import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput; ... SshPass sshpass = new SshPass() .password(\"mysecretpassword\"); Ssh ssh = new Ssh() .sshPass(sshpass) .option(\"StrictHostKeyChecking=no\") .hostname(\"username@remote.host.com\") .command(\"ls /tmp\"); ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput(); output.monitor(ssh.builder());","title":"SshPass"},{"location":"maven/","text":"Add the following artifact to your dependencies of your pom.xml : <dependency> <groupId>com.github.fracpete</groupId> <artifactId>rsync4j-all</artifactId> <version>3.2.3-12</version> </dependency>","title":"Maven"},{"location":"releases/","text":"Current release: 3.2.3-12 ( zip , spring-boot ) Last version with Windows 32-bit support: 3.2.3-12 Old releases: 3.2.3-11 ( zip , spring-boot ) 3.2.3-10 ( zip , spring-boot ) 3.2.3-9 ( zip , spring-boot ) 3.2.3-8 ( zip , spring-boot ) 3.2.3-7 ( zip , spring-boot ) 3.2.3-6 ( zip , spring-boot ) 3.2.3-5 ( zip , spring-boot ) 3.2.3-4 ( zip , spring-boot ) 3.2.3-3 ( zip , spring-boot ) 3.2.3-2 ( zip , spring-boot ) 3.2.3-1 ( zip , spring-boot ) 3.1.3-2 ( zip , spring-boot ) 3.1.3-1 ( zip , spring-boot ) 3.1.2-17 ( zip , spring-boot ) 3.1.2-16 ( zip , spring-boot ) 3.1.2-15 ( zip , spring-boot ) 3.1.2-14 ( zip , spring-boot ) 3.1.2-13 ( zip , spring-boot ) 3.1.2-12 ( zip , spring-boot ) 3.1.2-11 ( zip , spring-boot ) 3.1.2-10 ( zip , spring-boot ) 3.1.2-9 ( zip , spring-boot ) 3.1.2-8 ( zip , spring-boot ) 3.1.2-7 ( zip , spring-boot ) 3.1.2-6 ( zip ) 3.1.2-5 ( zip )","title":"Releases"},{"location":"windows/","text":"On first execution, these binaries will get placed in the following directory (on a per user basis): %USERPROFILE%\\rsync4j Below that directory there are home/%USERNAME%/.ssh and bin . ssh vs plain protocol # By default, plain protocol is used. If you want to use ssh, then simply supply this via the dummy string ssh . In Java code, this is done via rsh(\"ssh\") . On the command-line, via --rsh=ssh . SSH keys # You can place your ssh key pairs in the following directory: %USERPROFILE%\\rsync4j\\home\\%USERNAME%\\.ssh Binaries (64-bit) # rsync4j uses the rsync.exe , ssh.exe and ssh-keygen.exe executables and their dependencies from the 64-bit version of cywgin . The dependencies, as of 2023-01-18 (OpenSSH 9.1p1-1), are as follows: cygcom_err-2.dll cygcrypto-1.1.dll cyggcc_s-seh-1.dll cyggssapi_krb5-2.dll cygiconv-2.dll cygintl-8.dll cygk5crypto-3.dll cygkrb5-3.dll cygkrb5support-0.dll cyglz4-1.dll cygwin1.dll cygxxhash-0.dll cygz.dll cygzstd-1.dll You can easily determine the dependencies by running the executables. Windows will automatically pop up a dialog mentioning any DLLs that are missing. Place any missing DLLs in the following directory: rsync4j-windows64/src/main/resources/com/github/fracpete/rsync4j/windows64 And list the DLLs in the following text file: rsync4j-windows64/src/main/resources/com/github/fracpete/rsync4j/windows64/libraries.txt Paths # Since cygwin is being used, local paths get converted to cywgin notation. For example: C:\\some\\path\\blah.txt Will get automatically get converted to: /cygdrive/c/some/path/blah.txt Syncing between Windows hosts # You can easily synchronize two Windows hosts by using a UNC path for the remote host. For instance, directory C:\\some\\dir on the local machine can be synced to remotehost otherbox into directory C:\\other\\dir using these paths: source: /cygdrive/c/some/dir/ destination: //otherbox/C$/other/dir Custom location # See Environment variables/Windows .","title":"Windows"},{"location":"windows/#ssh-vs-plain-protocol","text":"By default, plain protocol is used. If you want to use ssh, then simply supply this via the dummy string ssh . In Java code, this is done via rsh(\"ssh\") . On the command-line, via --rsh=ssh .","title":"ssh vs plain protocol"},{"location":"windows/#ssh-keys","text":"You can place your ssh key pairs in the following directory: %USERPROFILE%\\rsync4j\\home\\%USERNAME%\\.ssh","title":"SSH keys"},{"location":"windows/#binaries-64-bit","text":"rsync4j uses the rsync.exe , ssh.exe and ssh-keygen.exe executables and their dependencies from the 64-bit version of cywgin . The dependencies, as of 2023-01-18 (OpenSSH 9.1p1-1), are as follows: cygcom_err-2.dll cygcrypto-1.1.dll cyggcc_s-seh-1.dll cyggssapi_krb5-2.dll cygiconv-2.dll cygintl-8.dll cygk5crypto-3.dll cygkrb5-3.dll cygkrb5support-0.dll cyglz4-1.dll cygwin1.dll cygxxhash-0.dll cygz.dll cygzstd-1.dll You can easily determine the dependencies by running the executables. Windows will automatically pop up a dialog mentioning any DLLs that are missing. Place any missing DLLs in the following directory: rsync4j-windows64/src/main/resources/com/github/fracpete/rsync4j/windows64 And list the DLLs in the following text file: rsync4j-windows64/src/main/resources/com/github/fracpete/rsync4j/windows64/libraries.txt","title":"Binaries (64-bit)"},{"location":"windows/#paths","text":"Since cygwin is being used, local paths get converted to cywgin notation. For example: C:\\some\\path\\blah.txt Will get automatically get converted to: /cygdrive/c/some/path/blah.txt","title":"Paths"},{"location":"windows/#syncing-between-windows-hosts","text":"You can easily synchronize two Windows hosts by using a UNC path for the remote host. For instance, directory C:\\some\\dir on the local machine can be synced to remotehost otherbox into directory C:\\other\\dir using these paths: source: /cygdrive/c/some/dir/ destination: //otherbox/C$/other/dir","title":"Syncing between Windows hosts"},{"location":"windows/#custom-location","text":"See Environment variables/Windows .","title":"Custom location"}]}